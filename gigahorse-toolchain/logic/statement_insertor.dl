#define MAX_INSERTS 5


#define COPY_CODE(to, from)\
to.Statement_Next(stmt, next) :- from.Statement_Next(stmt, next).\
to.Statement_Opcode(stmt, op) :- from.Statement_Opcode(stmt, op).\
to.PushValue(stmt, value) :- from.PushValue(stmt, value).


#define INITIALIZE_STATEMENT_INSERTOR(_insertor, to)\
.init _insertor = StatementInsertor \
to.Statement_Next(stmt, next) :- _insertor.Out_Statement_Next(stmt, next).\
to.Statement_Opcode(stmt, op) :- _insertor.Out_Statement_Opcode(stmt, op).\
to.PushValue(stmt, value) :- _insertor.Out_PushValue(stmt, value).

#define INITIALIZE_STATEMENT_INSERTOR_FROM(_insertor, from, to)\
COPY_CODE(_insertor, from)\
INITIALIZE_STATEMENT_INSERTOR(_insertor, to)

#define ISLABEL(value) (substr(value, 0, 9) = "JUMPDEST:")
#define MAKE_LABEL_REFERENCE(value) cat("JUMPDEST:", value)
#define GET_LABEL_REFERENCE(value) substr(value, 9, 30)

.comp CodeTransformer {
   // Inputs
  .decl Statement_Next(stmt: Statement, next: Statement)
  .decl Statement_Opcode(stmt: Statement, op: Opcode)
  .decl PushValue(stmt: Statement, value: Value)
      
  // Outputs
  .decl Out_Statement_Next(stmt: Statement, next: Statement)
  .decl Out_Statement_Opcode(stmt: Statement, op: Opcode)
  .decl Out_PushValue(stmt: Statement, value: Value)
}

.comp StatementInsertor : CodeTransformer {

  .type Insertion = [ op: Opcode, value: Value ]
  .type Insertions = [ insertion:Insertion, rest:Insertions ]

  // Insertions
  .decl insertOps(stmt: Statement, insertions: Insertions)
  
  // Modifications
  .decl changeOp(stmt: Statement, op: Opcode)
  changeOp(stmt, op) :- changeOp(stmt, op). // suppress warning

  // Removal
  .decl removeOp(stmt: Statement)
  removeOp(stmt) :- removeOp(stmt). // suppress warning

  .decl MetaData(newStmt: Statement, value: Value)
  
  // Simple translation
  .decl insertOp(stmt: Statement, op: Opcode, value: Value, order: number)

  .decl insertOpsN(stmt: Statement, insertions: Insertions, n: number)
  insertOpsN(stmt, insertions, 0) :-
   insertOps(stmt, insertions).

  insertOp(stmt, op, value, n),
  insertOpsN(stmt, rest, n+1) :-
   insertOpsN(stmt, [[op, value], rest], n).


  .decl PreInsertedOpNewStatementNum(stmt: Statement, order: number, newStmt: number)
  
  PreInsertedOpNewStatementNum(stmt, order, @hex_to_number(stmt) * MAX_INSERTS + order) :-
    insertOp(stmt, _, _, order).

  .decl PreInsertedOpMissingStmt(n : number)

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpNewStatementNum(_, _, newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

  PreInsertedOpMissingStmt(newStmt - 1) :-
     PreInsertedOpMissingStmt(newStmt), newStmt > 0,
     !PreInsertedOpNewStatementNum(_, _, newStmt - 1).

   .decl MaxStmt(n: number)
   MaxStmt(n) :- n = max @hex_to_number(stmt) : Statement_Opcode(stmt, _).

  .decl InsertedOpNewStatement(stmt: Statement, order: number, newStmt: Statement)

  .decl WastedSlots(newStmt: number, n: number)

  .decl TempPreInsertedOpNewAndMissingStatementNum(smallerThanNewStmt: number, newStmt: number)
  TempPreInsertedOpNewAndMissingStatementNum(smallerThanNewStmt, newStmt) :-
     PreInsertedOpNewStatementNum(_, _, newStmt),
     PreInsertedOpMissingStmt(smallerThanNewStmt), smallerThanNewStmt < newStmt.
     
  WastedSlots(newStmt, n) :-
     PreInsertedOpNewStatementNum(_, _, newStmt),
     n = count : { TempPreInsertedOpNewAndMissingStatementNum(_, newStmt) }.

  InsertedOpNewStatement(stmt, order, @number_to_hex(newStmt - n + maxStmt + 1)) :-
    PreInsertedOpNewStatementNum(stmt, order, newStmt),
    MaxStmt(maxStmt),
    WastedSlots(newStmt, n).

  Out_Statement_Opcode(stmt, op) :-
    Statement_Opcode(stmt, op),
    !changeOp(stmt, _),
    !removeOp(stmt).

  Out_Statement_Opcode(stmt, op) :-
    changeOp(stmt, op),
    !removeOp(stmt).

  Out_Statement_Opcode(newStmt, op) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, _, order).

  Out_PushValue(stmt, value) :-
    Out_Statement_Opcode(stmt, op),
    PushValue(stmt, value),
    OpcodeIsPush(op),
    !removeOp(stmt).

  MetaData(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    !OpcodeIsPush(op).


  Out_PushValue(newStmt, value) :-
    InsertedOpNewStatement(stmt, order, newStmt),
    insertOp(stmt, op, value, order),
    !ISLABEL(value),
    OpcodeIsPush(op).

  Out_PushValue(newStmt, @cast_to_symbol(actualLabel)) :-
    insertOp(stmt, op, label, order),
    OpcodeIsPush(op),
    ISLABEL(label),
    insertOp(stmtTo, "JUMPDEST", label, orderTo),
    InsertedOpNewStatement(stmtTo, orderTo, actualLabel),
    InsertedOpNewStatement(stmt, order, newStmt).

  .decl PreOut_Statement_Next(stmt: Statement, next: Statement)
  
  PreOut_Statement_Next(stmt, next) :-
   Statement_Next(stmt, next),
   !insertOp(next, _, _, _).

  PreOut_Statement_Next(stmt, next) :-
   Statement_Next(stmt, post),
   InsertedOpNewStatement(post, 0, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(post, i, stmt),
   InsertedOpNewStatement(post, i+1, next).

  PreOut_Statement_Next(stmt, next) :-
   InsertedOpNewStatement(next, i, stmt),
   !InsertedOpNewStatement(next, i+1, _).

  .decl PossibleNext(stmt: Statement, next: Statement, n: number)

  PossibleNext(stmt, next, 0) :-
    PreOut_Statement_Next(stmt, next).
   
  PossibleNext(stmt, nextnext, n+1) :-
    PossibleNext(stmt, next, n),
    PreOut_Statement_Next(next, nextnext),
    removeOp(next).

  .decl Max_Statement_Next(stmt: Statement, n: number)

  Max_Statement_Next(stmt, n) :-
     PossibleNext(stmt, _, _),
     n = max m : PossibleNext(stmt, _, m).

  Out_Statement_Next(stmt, next) :-
     PossibleNext(stmt, next, n),
     Max_Statement_Next(stmt, n),
     !removeOp(stmt).

  // TODO rest of the cases for removeOp
  FAILIF("Not total order", Out_Statement_Next(stmt, next), Out_Statement_Next(stmt, next2), next != next2).
  FAILIF("Missing Order", Out_Statement_Opcode(stmt, _), !Out_Statement_Next(stmt, _), !Out_Statement_Next(_, stmt)).
  FAILIF(cat("Missing Opcode ", stmt), (Out_Statement_Next(stmt, _) ; Out_Statement_Next(_, stmt)), !Out_Statement_Opcode(stmt, _)).
  FAILIF(cat("Missing Push Value ", stmt), Out_Statement_Opcode(stmt, op), OpcodeIsPush(op), !Out_PushValue(stmt, _)).
  
}