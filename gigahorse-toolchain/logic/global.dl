// The core of the decompiler logic. Most complex reasoning for value
// flow and detecting CFG edges (much like the Vandal decompiler) is here.

#define MAX_STACK_HEIGHT 50
#define LIMITSIZE_BLOCK_OUTPUT_CONTENTS 5000000
#define CheckIsVariable(v) ((v) < 0)
#define CheckIsStackIndex(v) ((v) >= 0, (v) < MAX_STACK_HEIGHT)
#define CheckIsPopDelta(v) ((v) >= 0, (v) < MAX_STACK_HEIGHT)
#define CheckIsStackDelta(n) ((n) < MAX_STACK_HEIGHT, (n) > -MAX_STACK_HEIGHT)
#define FUNCTION_SELECTOR "0x0"

#include "../clientlib/util.dl"
#include "local.dl"

#include "decompiler_input_opcodes.dl"


.type Block <: symbol
.type Value <: symbol
.type Variable <: number
.type StackIndex <: number
.type VariableOrStackIndex = Variable | StackIndex
.type Opcode <: symbol
.type Statement <: symbol
.type FunctionSignature <: symbol


                                         

/*
 ***********
 * Key dataflow definitions
 ***********
 */
 

// Stack contents at input and output of a block, given its calling context.
.decl BlockOutputContents(context:Context, block:Block, index:StackIndex, var:Variable)
.limitsize BlockOutputContents(n=LIMITSIZE_BLOCK_OUTPUT_CONTENTS)

.decl BlockInputContents(context:Context, block:Block, index:StackIndex, var:Variable)

// Var holding the (target block) address a block jumps to, under context.
.decl BlockJumpTarget(context:Context, block:Block, var:Variable)

.decl BlockEdge(callerCtx:Context, caller:Block, calleeCtx:Context, callee:Block)
.decl ReachableContext(ctx:Context, block:Block)


/*
 ***********
 * Define block's behavior based on constituents
 ***********
 */

.decl VariableContainsJumpTarget(var: Variable)
VariableContainsJumpTarget(var) :-
  postTrans.Variable_Value(var, value),
  postTrans.JUMPDEST(@cast_to_symbol(value)).

.decl AuxBlockOutputContentsJumpTarget(context:Context, block:Block, index:StackIndex, var:Variable)
AuxBlockOutputContentsJumpTarget(context, block, index, var) :-
  BlockOutputContents(context, block, index, var),
  VariableContainsJumpTarget(var).

BlockInputContents(calleeCtx, callee, index, variable) :-
  AuxBlockOutputContentsJumpTarget(callerCtx, caller, index, variable),
  BlockEdge(callerCtx, caller, calleeCtx, callee).
  .plan 1:(2,1)
  
// Copy the stack variables untouched by the callee basic block
BlockOutputContents(calleeCtx, callee, index+delta, variable) :-
  BlockInputContents(calleeCtx, callee, index, variable),
  postTrans.BlockPopDelta(callee, calleePopLen),
  postTrans.BlockStackDelta(callee, delta),
  index >= calleePopLen,
  index+delta <= MAX_STACK_HEIGHT.

// Handle the proper variables pushed by this basic block
BlockOutputContents(ctx, block, index, @cast_to_number(var)) :-
  ReachableContext(ctx, block),
  postTrans.BasicBlock_Tail(block, stmt),
  postTrans.LocalStackContents(stmt, index, var),
  CheckIsVariable(var).

// Handle the stackIndexes pushed by this basic block
BlockOutputContents(ctx, block, index, @cast_to_number(realVariable)) :-
  BlockInputContents(ctx, block, stackIndex, realVariable),
  CheckIsStackIndex(stackIndex),
  postTrans.BasicBlock_Tail(block, stmt),
  postTrans.LocalStackContents(stmt, index, stackIndex).



BlockJumpTarget(ctx, block, var) :-
  ReachableContext(ctx, block),
  postTrans.ImmediateBlockJumpTarget(block, var).

BlockJumpTarget(ctx, block, realVariable) :-
  BlockInputContents(ctx, block, stackIndex, realVariable),
  CheckIsStackIndex(stackIndex),
  postTrans.BasicBlock_Tail(block, stmt),
  postTrans.IsJump(stmt),
  postTrans.BeforeLocalStackContents(stmt, 0, stackIndex).


// Under ctx, the block's tail will jump to the value of "variable", which
// is equal to the label of "target" block.
.decl BlockJumpValidTarget(ctx:Context, block:Block, variable: Variable, target:Block)

BlockJumpValidTarget(ctx, block, targetVar, @cast_to_symbol(targetValue)) :-
  BlockJumpTarget(ctx, block, targetVar),
  postTrans.Variable_Value(targetVar, targetValue),
  postTrans.JUMPDEST(@cast_to_symbol(targetValue)).


/*
 ***********
 * CFG edges and reachable contexts
 ***********
 */

ReachableContext(calleeCtx, callee) :-
  BlockEdge(_, _, calleeCtx, callee).
  
ReachableContext(initCtx, FUNCTION_SELECTOR) :-
  InitialContext(initCtx).

.decl FallthroughEdge(caller: Block, fallthroughBlock: Block)

FallthroughEdge(caller, @cast_to_symbol(fallthrough)),
BlockEdge(callerCtx, caller, calleeCtx, @cast_to_symbol(fallthrough)) :-
  MergeContext(callerCtx, caller, calleeCtx),  // implies reachable
  postTrans.Statement_Block(stmt, caller),
  postTrans.FallthroughStmt(stmt, fallthrough),
  postTrans.IsBasicBlockHead(fallthrough).

BlockEdge(callerCtx, caller, calleeCtx, callee) :-
  BlockJumpValidTarget(callerCtx, caller, _, callee),
  MergeContext(callerCtx, caller, calleeCtx).
  .plan 1:(2,1)


.decl Statement_Uses(stmt:Statement, var:Variable, n:StackIndex)

// Case: variable originates locally
Statement_Uses(stmt, @cast_to_number(var), n) :-
   postTrans.Statement_Uses_Local(stmt, var, n),
   CheckIsVariable(var).

// Case: variable originates elsewhere
Statement_Uses(stmt, var, n) :-
   postTrans.Statement_Uses_Local(stmt, stackIndex, n),
   CheckIsStackIndex(stackIndex),
   postTrans.Statement_Block(stmt, block),
   BlockInputContents(_, block, stackIndex, var).


// Masks with all 1s
.decl Mask_Length(mask: Value, bytes: number)
.decl PreMask_Length(mask: symbol, bytes: number)

Mask_Length(cat("0x", mask), bytes) :-
   PreMask_Length(mask, bytes).

PreMask_Length("1", 1).
PreMask_Length("3", 1).
PreMask_Length("7", 1).
PreMask_Length("f", 1).
PreMask_Length("1f", 1).
PreMask_Length("3f", 1).
PreMask_Length("7f", 1).
PreMask_Length("ff", 1).

PreMask_Length(cat("ff", mask), bytes+1) :-
  PreMask_Length(mask, bytes),
  bytes < 32.