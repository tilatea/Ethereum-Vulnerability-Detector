
.output BlockEdge, FallthroughEdge, BlockJumpValidTarget, BlockJumpTarget, MaybeInFunctionUnderContext
.output NotValidReturnBlock, NotValidReturnEdge
.output MaybeFunctionCallReturn // DEBUG
.output CanReachUnderContext //DEBUG
.output PotentialCall // DEBUG
.output PossibleReturnAddressWithPos // DEBUG
.output IsFunctionCallReturn // DEBUG
.output IsFunctionEntry, IsFunctionCall, BlockToClone, MaybeInFunction // DEBUG
.output PossibleImpreciseNumberOfFunctionArguments, PossibleFunctionalBlockPopAndStackDelta
.output MaxRankForPossibleReturnAddressSetter

.output PossibleNumberOfFunctionArguments
.output PossibleNumberOfFunctionReturnArguments
.output PossibleCombinedNumberOfFunctionReturnsAndArguments
.output NumberOfFunctionArguments
.output NumberOfFunctionReturnArguments

.output Variable_String

// The following relations print a number instead of a context in record form to help debugging
// Without them looking (via grep) for a block using its id will return many contexts as well.

.decl ContextOrd(ctx:Context, ctxOrd:number)
.output ContextOrd
ContextOrd(ctx, ord(ctx)):-
  ReachableContext(ctx, _).

.decl BlockEdgeOrd(callerCtx:number, from:Block, calleeCtx:number, to:Block)
.output BlockEdgeOrd
BlockEdgeOrd(ord(callerCtx), from, ord(calleeCtx), to):-
  BlockEdge(callerCtx, from, calleeCtx, to).

.decl BlockOutputContentsOrd(context:number, block:Block, index:StackIndex, var:Variable)
.output BlockOutputContentsOrd
BlockOutputContentsOrd(ord(context), block, index, var):-
  BlockOutputContents(context, block, index, var).

.decl BlockInputContentsOrd(context:number, block:Block, index:StackIndex, var:Variable)
.output BlockInputContentsOrd
BlockInputContentsOrd(ord(context), block, index, var):-
  BlockInputContents(context, block, index, var).

.decl BlockJumpTargetOrd(context:number, block:Block, var:Variable)
.output BlockJumpTargetOrd
BlockJumpTargetOrd(ord(context), block, var):-
  BlockJumpTarget(context, block, var).

.decl BlockJumpValidTargetOrd(context:number, block:Block, var:Variable, target:Block)
.output BlockJumpValidTargetOrd
BlockJumpValidTargetOrd(ord(context), block, var, target):-
  BlockJumpValidTarget(context, block, var, target).

.decl MergeContextOrd(ctx: number, caller: Block, newContext: number)
.output MergeContextOrd
MergeContextOrd(ord(ctx), caller, ord(newContext)):-
  MergeContext(ctx, caller, newContext).

.decl ReachableContextOrd(ctx: number, block: Block)
.output ReachableContextOrd
ReachableContextOrd(ord(ctx), block):-
  ReachableContext(ctx, block).

.decl IsFunctionCallReturnOrd(ctx:number, caller:Block, func:Block, retCtx:number, retBlock:Block, retTarget:Block)
.output IsFunctionCallReturnOrd
IsFunctionCallReturnOrd(ord(ctx), caller, func, ord(retCtx), retBlock, retTarget):-
  IsFunctionCallReturn(ctx, caller, func, retCtx, retBlock, retTarget).

.decl MaybeFunctionCallReturnOrd(ctx:number, caller:Block, func:Block, retCtx:number, retBlock:Block, retTarget:Block)
.output MaybeFunctionCallReturnOrd
MaybeFunctionCallReturnOrd(ord(ctx), caller, func, ord(retCtx), retBlock, retTarget):-
  MaybeFunctionCallReturn(ctx, caller, func, retCtx, retBlock, retTarget).

.decl PossibleReturnAddressWithRankOrd(callCtx:number, targetSetter:Block, retCtx:number, retBlock:Block, retTarget:Block, rank:number)
.output PossibleReturnAddressWithRankOrd
PossibleReturnAddressWithRankOrd(ord(callCtx), targetSetter, ord(retCtx), retBlock, retTarget, rank):-
  PossibleReturnAddressWithRank(callCtx, targetSetter, retCtx, retBlock, retTarget, rank).

.decl MaybeInFunctionUnderContextOrd(ctx:number, block:Block, func:Block)
.output MaybeInFunctionUnderContextOrd
MaybeInFunctionUnderContextOrd(ord(ctx), block, func):-
  MaybeInFunctionUnderContext(ctx, block, func).
